//jshint esversion:6
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");

const app = express();

app.use(express.static("public"));
app.set('view engine', 'ejs')
app.use(bodyParser.urlencoded({extended:true}));

mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true})

const userSchema = {
  email: String,
  password: String
}

const User = mongoose.model("User", userSchema);


app.get("/", function(req, res){
  res.render("home");
});

app.get("/login", function(req, res){
  res.render("login");
});

app.get("/register", function(req, res){
  res.render("register");
});
app.post("/register", function(req, res){
  const newUser = new User({
    email: req.body.username,
    password: req.body.password
  });

  newUser.save(function(err){
    if(err){
       console.log(err);
    } else {
      res.render("secrets");
    }
  });
});

app.post("/login", function(req, res){
  const username = req.body.username;
  const password = req.body.password;
User.findOne({email: username}, function(err, foundUser){
  if(err){
    console.log(err);
  } else {
    if(foundUser){
      if(foundUser.password === password){
        res.render("secrets");
      }
    }
  }
});
});



app.listen(3000, function(){
  console.log("Server is starting on port 3000");
})


--------------------------------------------------------
Level--2

const userSchema = new mongoose.Schema ({
  email: String,
  password: String
});

const secret = "Thisosourlittlesecret.";
userSchema.plugin(encrypt, {secret: secret, encryptedFields: ["password"]});

remaing all code are same as above.
-------------------------------------------
environment variable
write this list in app.js in first line
require('dotenv').config();
.env   //file
SECRET=Thisosourlittlesecret.
API_KEY=hlfhluhuhkjkjddkdjjkdd

this is in blow the schema in app.js
userSchema.plugin(encrypt, {secret: process.env.SECRET, encryptedFields: ["password"]});


---------------------------------------------------------------
//Hashing 
const md5 = require('md5');
//register page password is saved encryption
password: md5(req.body.password)
//login page here is decrypt
const password = md5(req.body.password);

//bcrypt method level-------4--------------------------------
//jshint esversion:6
require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bcrypt = require('bcrypt');
const saltRounds = 5;

const app = express();

app.use(express.static("public"));
app.set('view engine', 'ejs')
app.use(bodyParser.urlencoded({extended:true}));

mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true})

const userSchema = new mongoose.Schema ({
  email: String,
  password: String
});


const User = mongoose.model("User", userSchema);


app.get("/", function(req, res){
  res.render("home");
});

app.get("/login", function(req, res){
  res.render("login");
});

app.get("/register", function(req, res){
  res.render("register");
});
app.post("/register", function(req, res){

  bcrypt.hash(req.body.password, saltRounds, function(err, hash) {
    const newUser = new User({
      email: req.body.username,
      password: hash
    });

    newUser.save(function(err){
      if(err){
         console.log(err);
      } else {
        res.render("secrets");
      }
    });
  });
});

app.post("/login", function(req, res){
  const username = req.body.username;
  const password = req.body.password;
User.findOne({email: username}, function(err, foundUser){
  if(err){
    console.log(err);
  } else {
    if(foundUser){
      bcrypt.compare(password, foundUser.password, function(err, result) {
          if (result === true) {
              res.render("secrets");
          }
      });
    }
  }
});
});
-------------------------------------------------------------------------
//cookies and sessions with level-6
//jshint esversion:6
// require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const session = require("express-session");
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");


const app = express();

app.use(express.static("public"));
app.set('view engine', 'ejs')
app.use(bodyParser.urlencoded({extended:true}));

//initilize sessions
app.use(session({
  secret: "our little secret.",
  resave: false,
  saveUninitialized: false
}));

//initilize passport
app.use(passport.initialize());
//and use passport sessions
app.use(passport.session());


mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true})
mongoose.set('useCreateIndex', true);

const userSchema = new mongoose.Schema ({
  email: String,
  password: String
});

//set userSchema to use passportLocalMongoose
userSchema.plugin(passportLocalMongoose);

const User = mongoose.model("User", userSchema);

passport.use(User.createStrategy());
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());



app.get("/", function(req, res){
  res.render("home");
});

app.get("/login", function(req, res){
  res.render("login");
});

app.get("/register", function(req, res){
  res.render("register");
});

app.get("/secrets", function(req, res){
  if(req.isAuthenticated()){
      res.render("secrets");
  }else {
    res.redirect("/login");
  }
});

// this is not a page
app.get("/logout", function(req, res){
  req.logout();
  res.redirect("/");
});

app.post("/register", function(req, res){
   User.register({username: req.body.username}, req.body.password, function(err, user){
     if(err){
       console.log(err);
       res.redirect("/register");
     }else {
       passport.authenticate("local")(req, res, function(){
         res.redirect("/secrets");
       });
     }
   });

});

app.post("/login", function(req, res){
   const user = new User ({
     username: req.body.username,
     password: req.body.password
   });
  req.login(user, function(err){
    if(err){
      console.log(err);
    }else {
      passport.authenticate("local")(req, res, function(){
        res.redirect("/secrets");
      })
    }
  })

});



app.listen(3000, function(){
  console.log("Server is starting on port 3000");
})


app.listen(3000, function(){
  console.log("Server is starting on port 3000");
})
